// datasource db {
//   provider = "mongodb"
//   url      = env("DATABASE_URL")
// }

// generator client {
//   provider = "prisma-client-js"
// }

// model User {
//   id               String    @id @default(auto()) @map("_id") @db.ObjectId
//   email            String    @unique
//   name             String?
//   image            String?
//   password         String?
//   createdAt        DateTime  @default(now())
//   updatedAt        DateTime  @updatedAt
//   resetToken       String?
//   resetTokenExpiry DateTime?
//   todos            Todo[]    @relation("UserTodos")
// }

// model Todo {
//   id        String   @id @default(auto()) @map("_id") @db.ObjectId
//   name      String
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   userId    String   @db.ObjectId
//   user      User     @relation("UserTodos", fields: [userId], references: [id])
//   tasks     Task[]   @relation("TodoTasks")
// }

// model Task {
//   id        String   @id @default(auto()) @map("_id") @db.ObjectId
//   name      String
//   completed Boolean  @default(false)
//   todoId    String   @db.ObjectId
//   todo      Todo     @relation("TodoTasks", fields: [todoId], references: [id])
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  email            String    @unique
  name             String?
  image            String?
  password         String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  resetToken       String?
  resetTokenExpiry DateTime?
  todos            Todo[]    @relation("UserTodos")
}

model Todo {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @db.ObjectId
  user      User     @relation("UserTodos", fields: [userId], references: [id])
  tasks     Task[]   @relation("TodoTasks")
  theme     String   @default("Vintage Garden")
}

model Task {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  completed Boolean  @default(false)
  todoId    String   @db.ObjectId
  todo      Todo     @relation("TodoTasks", fields: [todoId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}